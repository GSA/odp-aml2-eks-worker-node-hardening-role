---

- name: "SCORED | 3.2.1 | PATCH | L1 | WORKER | Ensure that the --anonymous-auth argument is set to false"
  block:
  - name: "SCORED | 3.2.1 | PATCH | L1 | WORKER | Slurp file {{ kubelet_config_file }}"
    slurp:
      src: "{{ kubelet_config_file }}"
    register: slurped_3_2_1
  - name: "SCORED | 3.2.1 | PATCH | L1 | WORKER | Convert to dictionary"
    set_fact:
      before_3_2_1: "{{ slurped_3_2_1.content|b64decode|from_yaml }}"

  - name: "SCORED | 3.2.1 | PATCH | L1 | WORKER | Add new value"
    vars: 
      new_value_3_2_1:
        authentication:
          anonymous:
            enabled: false
    set_fact:
      after_3_2_1: "{{ before_3_2_1 | combine(new_value_3_2_1) }}"
    when: before_3_2_1.authentication.anonymous.enabled is not defined

  - name: "SCORED | 3.2.1 | PATCH | L1 | WORKER | Set new value"
    set_fact:
      after_3_2_1: "{{ before_3_2_1 | combine(after_3_2_1, recursive=True) }}"
    vars: 
      after_3_2_1:
        authentication:
          anonymous: 
            enabled: false
    when: before_3_2_1.authentication.anonymous.enabled is defined and before_3_2_1.authentication.anonymous.enabled != false
  - name: "SCORED | 3.2.1 | PATCH | L1 | WORKER | Ensure that the --anonymous-auth argument is set to false"
    copy:
      content: '{{ after_4_2_1 | to_nice_yaml }}'
      dest: "{{ kubelet_config_file }}"
      backup: yes
    when: after_3_2_1 is defined
  when: rule_3_2_1
  tags:
    - level1
    - perms
    - rule_3.2.1
    - patch
    - worker

- name: "SCORED | 3.2.2 | PATCH | L1 | WORKER | Ensure that the --authorization-mode argument is not set to AlwaysAllow"
  block:
  - name: "SCORED | 3.2.2 | PATCH | L1 | WORKER | Slurp file {{ kubelet_config_file }}"
    slurp:
      src: "{{ kubelet_config_file }}"
    register: slurped_3_2_2
  - name: "SCORED | 3.2.2 | PATCH | L1 | WORKER | Convert to dictionary"
    set_fact:
      before_3_2_2: "{{ slurped_4_2_2.content|b64decode|from_yaml }}"
  - name: "SCORED | 3.2.2 | PATCH | L1 | WORKER | Add new value"
    vars: 
      new_value_3_2_2:
        authorization:
          mode: Webhook
    set_fact:
      after_3_2_2: "{{ before_3_2_2 | combine(new_value_3_2_2) }}"
    when: before_3_2_2.authorization.mode is not defined
  - name: "SCORED | 3.2.2 | PATCH | L1 | WORKER | Update existing value"
    set_fact:
      after_3_2_2: "{{ before_3_2_2 | combine(after_3_2_2, recursive=True) }}"
    vars: 
      after_3_2_2:
        authorization:
          mode: Webhook
    when: before_3_2_2.authorization.mode is defined and before_3_2_2.authorization.mode != "Webhook"
  - name: "SCORED | 3.2.2 | PATCH | L1 | WORKER | Ensure that the --authorization-mode argument is not set to AlwaysAllow"
    copy:
      content: '{{ after_3_2_2 | to_nice_yaml }}'
      dest: "{{ kubelet_config_file }}"
      backup: yes
    when: after_3_2_2 is defined
  when: rule_3_2_2
  tags:
    - level1
    - perms
    - rule_3.2.2
    - patch
    - worker

- name: "SCORED | 3.2.6 | PATCH | L1 | WORKER | Ensure that the --protect-kernel-defaults argument is set to true"
  block:
  - name: "SCORED | 3.2.6 | PATCH | L1 | WORKER | Slurp file {{ kubelet_config_file }}"
    slurp:
      src: "{{ kubelet_config_file }}"
    register: slurped_3_2_6
  - name: "SCORED | 3.2.6 | PATCH | L1 | WORKER | Convert to dictionary"
    set_fact:
      before_3_2_6: "{{ slurped_4_2_6.content|b64decode|from_yaml }}"
  - name: "SCORED | 3.2.6 | PATCH | L1 | WORKER | Add new value"
    vars: 
      new_value_3_2_6:
        protectKernelDefaults: true
    set_fact:
      after_3_2_6: "{{ before_3_2_6 | combine(new_value_3_2_6) }}"
    when: before_3_2_6.protectKernelDefaults is not defined
  - name: "SCORED | 3.2.6 | PATCH | L1 | WORKER | Update existing value"
    set_fact:
      after_3_2_6: "{{ before_3_2_6 | combine(after_3_2_6, recursive=True) }}"
    vars: 
      after_3_2_6:
        protectKernelDefaults: true
    when: before_3_2_6.protectKernelDefaults is defined and before_3_2_6.protectKernelDefaults != true
  - name: "SCORED | 3.2.6 | PATCH | L1 | WORKER | Ensure that the --protect-kernel-defaults argument is set to true"
    copy:
      content: '{{ after_3_2_6 | to_nice_yaml }}'
      dest: "{{ kubelet_config_file }}"
      backup: yes
    when: after_3_2_6 is defined
  when: rule_3_2_6
  tags:
    - level1
    - perms
    - rule_3.2.6
    - patch
    - worker


- name: "SCORED | 3.2.7 | PATCH | L1 | WORKER | Ensure that the --make-iptables-util-chains argument is set to true"
  block:
  - name: "SCORED | 3.2.7 | PATCH | L1 | WORKER | Slurp file {{ kubelet_config_file }}"
    slurp:
      src: "{{ kubelet_config_file }}"
    register: slurped_3_2_7
  - name: "SCORED | 3.2.7 | PATCH | L1 | WORKER | Convert to dictionary"
    set_fact:
      before_3_2_7: "{{ slurped_3_2_7.content|b64decode|from_yaml }}"
  - name: "SCORED | 3.2.7 | PATCH | L1 | WORKER | Add new value"
    vars: 
      new_value_3_2_7:
        makeIPTablesUtilChains: true
    set_fact:
      after_3_2_7: "{{ before_3_2_7 | combine(new_value_3_2_7) }}"
    when: before_3_2_7.makeIPTablesUtilChains is not defined
  - name: "SCORED | 3.2.7 | PATCH | L1 | WORKER | Update existing value"
    set_fact:
      after_3_2_7: "{{ before_3_2_7 | combine(after_3_2_7, recursive=True) }}"
    vars: 
      after_3_2_7:
        makeIPTablesUtilChains: true
    when: before_3_2_7.makeIPTablesUtilChains is defined and before_3_2_7.makeIPTablesUtilChains != true
  - name: "SCORED | 3.2.7 | PATCH | L1 | WORKER | Ensure that the --make-iptables-util-chains argument is set to true"
    copy:
      content: '{{ after_3_2_7 | to_nice_yaml }}'
      dest: "{{ kubelet_config_file }}"
      backup: yes
    when: after_3_2_7 is defined
  when: rule_3_2_7
  tags:
    - level1
    - perms
    - rule_3.2.7
    - patch
    - worker

- name: "SCORED | 3.2.9 | PATCH | L2 | WORKER | Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture"
  block:
  - name: "SCORED | 3.2.9 | PATCH | L2 | WORKER | Slurp file {{ kubelet_config_file }}"
    slurp:
      src: "{{ kubelet_config_file }}"
    register: slurped_3_2_9
  - name: "SCORED | 3.2.9 | PATCH | L2 | WORKER | Convert to dictionary"
    set_fact:
      before_3_2_9: "{{ slurped_3_2_9.content|b64decode|from_yaml }}"
  - name: "SCORED | 3.2.9 | PATCH | L2 | WORKER | Add new value"
    vars: 
      new_value_3_2_9:
        eventRecordQPS: "{{ event_record_qps }}"
    set_fact:
      after_3_2_9: "{{ before_3_2_9 | combine(new_value_3_2_9) }}"
    when: before_3_2_9.eventRecordQPS is not defined
  - name: "SCORED | 3.2.9 | PATCH | L2 | WORKER | Update existing value"
    set_fact:
      after_3_2_9: "{{ before_3_2_9 | combine(after_3_2_9, recursive=True) }}"
    vars: 
      after_3_2_9:
        eventRecordQPS: "{{ event_record_qps }}"
    when: before_3_2_9.eventRecordQPS is defined and before_3_2_9.eventRecordQPS != event_record_qps
  - name: "SCORED | 3.2.9 | PATCH | L2 | WORKER | Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture"
    copy:
      content: '{{ after_3_2_9 | to_nice_yaml }}'
      dest: "{{ kubelet_config_file }}"
      backup: yes
    when: after_3_2_9 is defined
  when: rule_3_2_9
  tags:
    - level2
    - perms
    - rule_3.2.9
    - patch
    - worker


  


